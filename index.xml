<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>K5D::Blog</title>
        <link>https://kienngd.github.io/</link>
        <description>K5D::Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>kienngd@gmail.com (Kien Nguyen)</managingEditor>
            <webMaster>kienngd@gmail.com (Kien Nguyen)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 08 Sep 2025 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="https://kienngd.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Python Decorators: A Simple Guide</title>
    <link>https://kienngd.github.io/python_decorators_a_simple_guide/</link>
    <pubDate>Mon, 08 Sep 2025 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/python_decorators_a_simple_guide/</guid>
    <description><![CDATA[Python Decorators: A Simple Guide 1 What is a Decorator?A decorator in Python is a function that modifies the behavior of another function. It adds extra functionality without changing the original function code.
2 Why Use Decorators?Decorators help you:
Reuse code Keep functions clean Add logging, timing, or access control Make your code more readable 3 Basic Example 1 2 3 4 5 6 7 8 9 10 11 12 13 def my_decorator(func): def wrapper(*args, **kwargs): print(&#34;Before function&#34;) result = func(*args, **kwargs) # Call original function print(&#34;After function&#34;) return result return wrapper @my_decorator def greet(name): print(f&#34;Hello {name}!]]></description>
</item><item>
    <title>How to Properly Catch and Raise Exceptions</title>
    <link>https://kienngd.github.io/process-exceptions/</link>
    <pubDate>Sun, 24 Aug 2025 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/process-exceptions/</guid>
    <description><![CDATA[üêç How to Properly Catch and Raise Exceptions ‚Äì A Guide for Junior Developers(This article was created by Qwen AI)
Handling exceptions correctly isn&rsquo;t just about preventing crashes ‚Äî it makes your code more stable, easier to debug, and simpler to maintain. Here are simple, practical rules every junior developer should follow.
1 ‚úÖ Only catch an exception when you know what to do ‚ùå Don&rsquo;t catch an exception just &ldquo;because you can&rdquo;.]]></description>
</item><item>
    <title>How to Manage Software with Flatpak on Ubuntu 22.04</title>
    <link>https://kienngd.github.io/manage-software-using-flatpak/</link>
    <pubDate>Tue, 11 Mar 2025 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/manage-software-using-flatpak/</guid>
    <description><![CDATA[<p><strong>Introduction to Flatpak on Ubuntu 24.04</strong></p>
<p><strong>Flatpak</strong> is a system for running applications on Linux in a secure and isolated way. It works on many Linux distributions, including Ubuntu 24.04. Flatpak makes it easy to install apps without worrying about missing dependencies. It also allows apps to be updated easily.</p>]]></description>
</item><item>
    <title>Parallel Processing In Python3</title>
    <link>https://kienngd.github.io/parallel_processing_in_python3/</link>
    <pubDate>Fri, 28 Feb 2025 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/parallel_processing_in_python3/</guid>
    <description><![CDATA[<h2 id="-why-use-parallel-processing" class="headerLink">
    <a href="#-why-use-parallel-processing" class="header-mark"></a>1 ü§î Why Use Parallel Processing?</h2><p>When running üêç Python programs, some tasks take a long ‚è≥ time to complete. For example, calling an external üåê API or reading large üìÇ files. If we run these tasks one by one, it can be üêå slow. Instead, we can run them in parallel to save ‚è±Ô∏è time.</p>]]></description>
</item><item>
    <title>Python&#39;s **kwargs: What is it?</title>
    <link>https://kienngd.github.io/python-kwargs-what-is-it/</link>
    <pubDate>Tue, 11 Feb 2025 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/python-kwargs-what-is-it/</guid>
    <description><![CDATA[<h2 id="pythons-kwargs-what-is-it" class="headerLink">
    <a href="#pythons-kwargs-what-is-it" class="header-mark"></a>1 Python&rsquo;s <code>**kwargs</code>: What is it?</h2><p>In Python, <code>**kwargs</code> is a special syntax that allows you to pass a variable number of keyword arguments to a function.</p>]]></description>
</item><item>
    <title>Virtual environment in Python 3</title>
    <link>https://kienngd.github.io/virtual-environment-in-python-3/</link>
    <pubDate>Tue, 11 Feb 2025 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/virtual-environment-in-python-3/</guid>
    <description><![CDATA[<h2 id="what-is-a-virtual-environment" class="headerLink">
    <a href="#what-is-a-virtual-environment" class="header-mark"></a>1 What is a virtual environment?</h2><p>A virtual environment is a separate Python environment. It is isolated from your system&rsquo;s Python environment. It lets you install Python packages and libraries. These packages don&rsquo;t affect other projects or your system&rsquo;s Python.</p>]]></description>
</item><item>
    <title>How to Update Your Docker Image Without Starting From Scratch</title>
    <link>https://kienngd.github.io/update-docker-image-without-starting-from-scratch/</link>
    <pubDate>Sun, 17 Nov 2024 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/update-docker-image-without-starting-from-scratch/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/update-docker-image-without-starting-from-scratch/banner-docker.jpg" referrerpolicy="no-referrer">
            </div><p>Hi, it&rsquo;s me here again! üëã</p>
<p>Ever been in this situation? You have a <code>Docker image</code> that you&rsquo;ve been using for a while, and suddenly you <code>need to add some new softwares</code>. Building everything from scratch again? Nobody has time for that! üòÖ</p>
<p>Let me share a neat trick I use to save time.</p>]]></description>
</item><item>
    <title>A Late Night Database Recovery Story</title>
    <link>https://kienngd.github.io/database-recovery-story/</link>
    <pubDate>Thu, 14 Nov 2024 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/database-recovery-story/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/database-recovery-story/securing-mysql-banner.png" referrerpolicy="no-referrer">
            </div><h2 id="the-story" class="headerLink">
    <a href="#the-story" class="header-mark"></a>1 The story</h2><p>It was late at night when my close friend called me. She was panicked because his database was lost.</p>
<p>She sent me information, then I logged into the server to check. The MySQL service was still running. I found that both <code>general log</code> and <code>binary log</code> were enabled on the server.</p>]]></description>
</item><item>
    <title>Exploring the split Command</title>
    <link>https://kienngd.github.io/exploring-the-split-command/</link>
    <pubDate>Tue, 15 Oct 2024 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/exploring-the-split-command/</guid>
    <description><![CDATA[<p>The <code>split</code> command is a useful tool for breaking down large files into smaller, more manageable pieces. It is especially helpful when dealing with file size limitations or when you need to transfer files over networks.</p>
<h2 id="basic-syntax-and-example" class="headerLink">
    <a href="#basic-syntax-and-example" class="header-mark"></a>1 Basic Syntax and Example</h2><p>The basic syntax of the <code>split</code> command is:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">split <span class="o">[</span>OPTIONS<span class="o">]</span> <span class="o">[</span>INPUT <span class="o">[</span>PREFIX<span class="o">]]</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>Use PHPStan to Ensure Code Quality in Your Project</title>
    <link>https://kienngd.github.io/use-phpstan-to-ensure-code-quality-in-your-project/</link>
    <pubDate>Fri, 04 Oct 2024 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>https://kienngd.github.io/use-phpstan-to-ensure-code-quality-in-your-project/</guid>
    <description><![CDATA[<p><figure><img
        
        loading="lazy"
        src="/use-phpstan-to-ensure-code-quality-in-your-project/phpstan-banner_hu3be14738fab87c5f9e16196a9383de75_8018_1200x0_resize_q75_h2_lanczos_3.webp"
        srcset="/use-phpstan-to-ensure-code-quality-in-your-project/phpstan-banner_hu3be14738fab87c5f9e16196a9383de75_8018_700x0_resize_q75_h2_lanczos_3.webp 700w,
            /use-phpstan-to-ensure-code-quality-in-your-project/phpstan-banner_hu3be14738fab87c5f9e16196a9383de75_8018_1200x0_resize_q75_h2_lanczos_3.webp 1200w,
            /use-phpstan-to-ensure-code-quality-in-your-project/phpstan-banner_hu3be14738fab87c5f9e16196a9383de75_8018_2000x0_resize_q75_h2_lanczos_3.webp 2000w"
        title="PHPStan A Testing Tool" height="413"   width="1200" ><figcaption class="image-caption">PHPStan A Testing Tool</figcaption>
    </figure></p>
<h2 id="introduction" class="headerLink">
    <a href="#introduction" class="header-mark"></a>1 <strong>Introduction</strong></h2><p><strong>PHPStan</strong> is a powerful static analysis tool for PHP that checks your code for potential errors without executing it. By using <strong>PHPStan</strong>, you can catch bugs early in the development process, improve the overall <strong>quality</strong> of your code, and ensure your project is more <strong>stable</strong> and <strong>maintainable</strong>.</p>]]></description>
</item></channel>
</rss>
