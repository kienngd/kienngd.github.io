<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>PHP - Tag - K5D::Blog</title>
        <link>http://localhost:1313/tags/php/</link>
        <description>PHP - Tag - K5D::Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>kienngd@gmail.com (Kien Nguyen)</managingEditor>
            <webMaster>kienngd@gmail.com (Kien Nguyen)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 04 Oct 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/php/" rel="self" type="application/rss+xml" /><item>
    <title>Use PHPStan to Ensure Code Quality in Your Project</title>
    <link>http://localhost:1313/use-phpstan-to-ensure-code-quality-in-your-project/</link>
    <pubDate>Fri, 04 Oct 2024 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>http://localhost:1313/use-phpstan-to-ensure-code-quality-in-your-project/</guid>
    <description><![CDATA[<p><figure><img
        
        loading="lazy"
        src="/use-phpstan-to-ensure-code-quality-in-your-project/phpstan-banner_hu3be14738fab87c5f9e16196a9383de75_8018_1200x0_resize_q75_h2_lanczos_3.webp"
        srcset="/use-phpstan-to-ensure-code-quality-in-your-project/phpstan-banner_hu3be14738fab87c5f9e16196a9383de75_8018_700x0_resize_q75_h2_lanczos_3.webp 700w,
            /use-phpstan-to-ensure-code-quality-in-your-project/phpstan-banner_hu3be14738fab87c5f9e16196a9383de75_8018_1200x0_resize_q75_h2_lanczos_3.webp 1200w,
            /use-phpstan-to-ensure-code-quality-in-your-project/phpstan-banner_hu3be14738fab87c5f9e16196a9383de75_8018_2000x0_resize_q75_h2_lanczos_3.webp 2000w"
        title="PHPStan A Testing Tool" height="413"   width="1200" ><figcaption class="image-caption">PHPStan A Testing Tool</figcaption>
    </figure></p>
<h2 id="introduction" class="headerLink">
    <a href="#introduction" class="header-mark"></a>1 <strong>Introduction</strong></h2><p><strong>PHPStan</strong> is a powerful static analysis tool for PHP that checks your code for potential errors without executing it. By using <strong>PHPStan</strong>, you can catch bugs early in the development process, improve the overall <strong>quality</strong> of your code, and ensure your project is more <strong>stable</strong> and <strong>maintainable</strong>.</p>]]></description>
</item><item>
    <title>Pipeline-partten in Laravel</title>
    <link>http://localhost:1313/pipeline-partern-in-laravel/</link>
    <pubDate>Mon, 26 Aug 2024 00:00:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>http://localhost:1313/pipeline-partern-in-laravel/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/pipeline-partern-in-laravel/pipeline-diagram.webp" referrerpolicy="no-referrer">
            </div><p>In Laravel, the <strong>pipeline pattern</strong> helps you process a series of tasks in a clear and organized way. Instead of handling each step separately, you can use a pipeline to apply multiple actions in sequence.</p>
<p>This pattern is useful when you need to apply several steps to data or an object. For example, you can use a pipeline to handle an order request with steps like validation, and adding data to the order and finally save it to database.</p>]]></description>
</item><item>
    <title>Strategy Pattern in PHP with examples</title>
    <link>http://localhost:1313/strategy-pattern-in-php/</link>
    <pubDate>Fri, 21 Apr 2023 01:10:00 &#43;0000</pubDate><author>
        <name>Kien Nguyen</name>
    </author><guid>http://localhost:1313/strategy-pattern-in-php/</guid>
    <description><![CDATA[<h2 id="example-1-sort" class="headerLink">
    <a href="#example-1-sort" class="header-mark"></a>1 Example 1: Sort</h2><p>We need to implement a sorting system that sorts an array of numbers in ascending or descending order</p>
<h3 id="without-pattern" class="headerLink">
    <a href="#without-pattern" class="header-mark"></a>1.1 Without pattern</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Sorter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="k">array</span> <span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Implementation of Bubble Sort
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">quickSort</span><span class="p">(</span><span class="k">array</span> <span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Implementation of Quick Sort
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="k">array</span> <span class="nv">$arr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Implementation of Merge Sort
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$sorter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sorter</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nv">$sortedArr</span> <span class="o">=</span> <span class="nv">$sorter</span><span class="o">-&gt;</span><span class="na">bubbleSort</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// or $sorter-&gt;quickSort($arr) or $sorter-&gt;mergeSort($arr)
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
