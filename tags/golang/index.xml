<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>GoLang - Tag - K5D::Blog</title>
        <link>https://kienngd.github.io/tags/golang/</link>
        <description>GoLang - Tag - K5D::Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>kienngd@gmail.com (Kien Nguyen)</managingEditor>
            <webMaster>kienngd@gmail.com (Kien Nguyen)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 26 Jun 2024 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://kienngd.github.io/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>Inheritance in GoLang</title>
    <link>https://kienngd.github.io/inheritance_in_golang.md/</link>
    <pubDate>Wed, 26 Jun 2024 00:00:00 &#43;0000</pubDate><author>
                    <name>Kien Nguyen</name>
                </author><guid>https://kienngd.github.io/inheritance_in_golang.md/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/inheritance_in_golang.md/inheritance.png" referrerpolicy="no-referrer">
            </div><p><strong>Inheritance</strong> is an important concept in OOP (Object-Oriented Programming). Since Golang does not support classes, there is <strong>no inheritance concept in GoLang</strong>. However, you can implement inheritance through <strong>struct embedding</strong>.</p>]]></description>
</item><item>
    <title>Functional options pattern with example</title>
    <link>https://kienngd.github.io/functional-options-pattern/</link>
    <pubDate>Tue, 25 Jun 2024 00:00:00 &#43;0000</pubDate><author>
                    <name>Kien Nguyen</name>
                </author><guid>https://kienngd.github.io/functional-options-pattern/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/functional-options-pattern/functional-options-social.png" referrerpolicy="no-referrer">
            </div><h2 id="what-is-the-functional-options-pattern" class="headerLink">
    <a href="#what-is-the-functional-options-pattern" class="header-mark"></a>1 What is the Functional Options Pattern?</h2><p>The Functional Options Pattern is a design pattern used in programming. It helps to set up options for a function or object in a flexible and clear way. Instead of having many parameters in a function, you use options to configure it.</p>]]></description>
</item><item>
    <title>How to working with JSON in GoLang</title>
    <link>https://kienngd.github.io/working-with-json-in-golang/</link>
    <pubDate>Thu, 08 Oct 2020 01:10:00 &#43;0000</pubDate><author>
                    <name>Kien Nguyen</name>
                </author><guid>https://kienngd.github.io/working-with-json-in-golang/</guid>
    <description><![CDATA[<p>In this post, we will learn how to parse json data in GoLang. Have fun!</p>
<p><strong>Working with structed data</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Import package
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bird</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Species</span>     <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Description</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">jsonString</span> <span class="o">:=</span> <span class="s">`{	
</span></span></span><span class="line"><span class="cl"><span class="s">		&#34;species&#34;: &#34;pigeon&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">		&#34;description&#34;: &#34;likes to perch on rocks likes to perch on rocks likes to perch on rocks&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">	}`</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">bird</span> <span class="nx">Bird</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">jsonString</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">bird</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">nill</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// json string is invalid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item></channel>
</rss>
